$Id: README.hacker,v 2.9.3.1 1997/06/08 20:09:50 root Exp root $
This file contains information useful to perl coders who would like to
understand better how pei works.

Function Maps
  The associative array %functionmap maps pei commands to perl functions.
  For example, when you type "exec cmdfile", then since
  $functionmap{"exec"} = '&execfile', the perl function &execfile will be
  called.  You can write your own functionmap functions.  Upon arriving
  at the functionmap function, the command which invoked it will be in
  the variable $command, and it's arguments will be in $commandarg.
  For example, you could add the following code to the file "pei":
    In the &init function of pei, add:
      $functionmap{"say"} = '&say';
    And then at the end of the pei script put:
      sub say {
	print $commandarg . "\n";
      }
  To see a list of functionmaps already defined, type:
    print sort keys %functionmap

  If your perl function makes reference to any of your country
  variables, then you will need to put it in the tools.pl file and call
  it tools_something.  For an example of how to write a tool like this,
  have a look at the "jack", "rebel", or "fus" tools in tools.pl.  They
  are all small and relatively easy to understand.

Parse Maps
  Often the server sends you information that you want to remember
  internally in pei.  Server output is parsed into pei variables using
  parse maps.  For example, when you type "cen #", you receive a lot
  of information about your sectors, and since there is a parse map for
  the command "cen", as you read the output of "cen #", perl will be
  reading it as well, and parsing it into its internal database.
  Parse maps are defined in the associative array %parsemap.  The
  key of the array is the name of the empire command, and the value
  is the name of a perl function used to parse the output of the data.
  When the perl function is called, the line to be parsed will be in $_.
  See parse.pl for examples.

  To see a list of the commands which are presently parsed, type:
    print %parsemap

&S_read
  For those who are curious, here are some of the special characters
  interpretted by the telnet protocol:
  Name    Dec. Octal   Description
  ----    ---- -----   -----------
  IAC     255  \377    /* interpret as command: */
  DONT    254  \376    /* you are not to use option */
  DO      253  \375    /* please, you use option */
  WONT    252  \374    /* I won't use option */
  WILL    251  \373    /* I will use option */
  SB      250  \372    /* interpret as subnegotiation */
  GA      249  \371    /* you may reverse the line */
  EL      248  \370    /* erase the current line */
  EC      247  \367    /* erase the current character */
  AYT     246  \366    /* are you there */
  AO      245  \365    /* abort output--but let prog finish */
  IP      244  \364    /* interrupt process--permanently */
  BREAK   243  \363    /* break */
  DM      242  \362    /* data mark--for connect. cleaning */
  NOP     241  \361    /* nop */
  SE      240  \360    /* end sub negotiation */
  EOR     239  \357    /* end of record (transparent mode) */
